// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SupTechHackathon2024.EFCore;

#nullable disable

namespace SupTechHackathon2024.EFCore.Migrations
{
    [DbContext(typeof(CBEContext))]
    [Migration("20241210224137_RenamingAndSeed")]
    partial class RenamingAndSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Arabic_100_CI_AI")
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.AddressType", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("AddressType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            NameAr = "عنوان دائم",
                            NameEn = "Permanent Address"
                        },
                        new
                        {
                            Id = (short)2,
                            NameAr = "عنوان مؤقت",
                            NameEn = "Temporary Address"
                        },
                        new
                        {
                            Id = (short)3,
                            NameAr = "عنوان حالي",
                            NameEn = "Current Address"
                        });
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Bank", (string)null);
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.BankBranch", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("BankBranch", (string)null);
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.Call", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("BankBranchId")
                        .HasColumnType("int");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<string>("CbeCustomerId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("CbeCustomerId");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FinancialServiceId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsAiAnalysisFailed")
                        .HasColumnType("bit")
                        .HasColumnName("IsAiAnalysisFailed");

                    b.Property<bool?>("IsMisSellingDetected")
                        .HasColumnType("bit");

                    b.Property<int?>("MisSellingCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Transcript")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.HasKey("Id");

                    b.HasIndex("CbeCustomerId");

                    b.HasIndex(new[] { "BankId" }, "idx_Call_BankId");

                    b.HasIndex(new[] { "BankBranchId" }, "idx_Call_BranchId");

                    b.HasIndex(new[] { "FinancialServiceId" }, "idx_Call_FinancialServiceId");

                    b.HasIndex(new[] { "IsAiAnalysisFailed" }, "idx_Call_IsAIAnalysisFailed");

                    b.HasIndex(new[] { "IsMisSellingDetected" }, "idx_Call_IsMisSellingDetected");

                    b.HasIndex(new[] { "MisSellingCategoryId" }, "idx_Call_MisSellingCategoryId");

                    b.ToTable("Call", (string)null);
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.CbeCustomer", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.Property<short>("CustomerTypeId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("LatestCreditBureauReportingDate")
                        .HasColumnType("date");

                    b.Property<short?>("LatestCreditBureauScore")
                        .HasColumnType("smallint");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("SmeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CustomerTypeId" }, "idx_CbeCustomer_CustomerTypeId");

                    b.HasIndex(new[] { "LatestCreditBureauReportingDate" }, "idx_CbeCustomer_LatestCreditBureauReportingDate");

                    b.HasIndex(new[] { "LatestCreditBureauScore" }, "idx_CbeCustomer_LatestCreditBureauScore");

                    b.HasIndex(new[] { "PersonId" }, "idx_CbeCustomer_PersonId");

                    b.HasIndex(new[] { "SmeId" }, "idx_CbeCustomer_SmeId");

                    b.ToTable("CbeCustomer", (string)null);
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.Currency", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Currency", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            NameAr = "الجنيه المصري",
                            NameEn = "Egyptian Pound"
                        },
                        new
                        {
                            Id = (short)2,
                            NameAr = "الدولار الأمريكي",
                            NameEn = "US Dollar"
                        },
                        new
                        {
                            Id = (short)3,
                            NameAr = "اليورو",
                            NameEn = "Euro"
                        },
                        new
                        {
                            Id = (short)4,
                            NameAr = "الين الياباني",
                            NameEn = "Japanese Yen"
                        },
                        new
                        {
                            Id = (short)5,
                            NameAr = "الجنيه الإسترليني",
                            NameEn = "British Pound"
                        },
                        new
                        {
                            Id = (short)6,
                            NameAr = "الريال السعودي",
                            NameEn = "Saudi Riyal"
                        },
                        new
                        {
                            Id = (short)7,
                            NameAr = "الدرهم الإماراتي",
                            NameEn = "UAE Dirham"
                        },
                        new
                        {
                            Id = (short)8,
                            NameAr = "الدينار الكويتي",
                            NameEn = "Kuwaiti Dinar"
                        },
                        new
                        {
                            Id = (short)9,
                            NameAr = "الروبية الهندية",
                            NameEn = "Indian Rupee"
                        },
                        new
                        {
                            Id = (short)10,
                            NameAr = "اليوان الصيني",
                            NameEn = "Chinese Yuan"
                        });
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.CustomerAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CbeCustomerId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("CbeCustomerId");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Governorate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OtherDetails")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<short>("TypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CbeCustomerId" }, "idx_CustomerAddress_CbeCustomerId");

                    b.HasIndex(new[] { "TypeId" }, "idx_CustomerAddress_TypeId");

                    b.ToTable("CustomerAddress", (string)null);
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.CustomerCreditBureauReportingYearlyHistory", b =>
                {
                    b.Property<string>("CbeCustomerId")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("CbeCustomerId");

                    b.Property<short>("Year")
                        .HasColumnType("smallint");

                    b.Property<short>("Score")
                        .HasColumnType("smallint");

                    b.HasKey("CbeCustomerId", "Year")
                        .HasName("PK_CustomerCreditBureauReportingYearlyHistory");

                    b.HasIndex(new[] { "CbeCustomerId" }, "idx_CustomerCreditBureauReportingYearlyHistory_CbeCustomerId");

                    b.HasIndex(new[] { "Score" }, "idx_CustomerCreditBureauReportingYearlyHistory_Score");

                    b.ToTable("CustomerCreditBureauReportingYearlyHistory", (string)null);
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.CustomerRiskRateYearlyHistory", b =>
                {
                    b.Property<string>("CbeCustomerId")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("CbeCustomerId");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<short>("Year")
                        .HasColumnType("smallint");

                    b.Property<short>("Rate")
                        .HasColumnType("smallint");

                    b.HasKey("CbeCustomerId", "BankId", "Year")
                        .HasName("PK_CustomerRiskRateYearlyHistory");

                    b.HasIndex("BankId");

                    b.HasIndex(new[] { "CbeCustomerId" }, "idx_CustomerRiskRateYearlyHistory_CbeCustomerId");

                    b.ToTable("CustomerRiskRateYearlyHistory", (string)null);
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.CustomerType", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("CustomerType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            NameAr = "أفراد",
                            NameEn = "Retail"
                        },
                        new
                        {
                            Id = (short)2,
                            NameAr = "شركات صغيرة ومتوسطة",
                            NameEn = "SMEs"
                        });
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.EducationLevel", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("EducationLevel", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            NameAr = "بدون مؤهل (غير متعلم وحتى الإعدادية)",
                            NameEn = "Illiterate to Preparatory School"
                        },
                        new
                        {
                            Id = (short)2,
                            NameAr = "مؤهل متوسط",
                            NameEn = "High School"
                        },
                        new
                        {
                            Id = (short)3,
                            NameAr = "مؤهل عالي",
                            NameEn = "University or Postgraduate Degree"
                        });
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.EmploymentStatus", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("EmploymentStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            NameAr = "لا يعمل",
                            NameEn = "Unemployed"
                        },
                        new
                        {
                            Id = (short)2,
                            NameAr = "عمل بدخل ثابت",
                            NameEn = "Fixed Income Job"
                        },
                        new
                        {
                            Id = (short)3,
                            NameAr = "عمل حر",
                            NameEn = "Self-Employed"
                        });
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.FinancialService", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("FinancialService", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameAr = "بطاقة ائتمان",
                            NameEn = "Credit Card"
                        },
                        new
                        {
                            Id = 2,
                            NameAr = "قرض شخصي",
                            NameEn = "Personal Loan"
                        },
                        new
                        {
                            Id = 3,
                            NameAr = "حساب توفير",
                            NameEn = "Savings Account"
                        },
                        new
                        {
                            Id = 4,
                            NameAr = "خدمات التأمين",
                            NameEn = "Insurance Services"
                        },
                        new
                        {
                            Id = 5,
                            NameAr = "قرض عقاري",
                            NameEn = "Mortgage Loan"
                        },
                        new
                        {
                            Id = 6,
                            NameAr = "استثمار في الصناديق المشتركة",
                            NameEn = "Mutual Fund Investment"
                        },
                        new
                        {
                            Id = 7,
                            NameAr = "حساب جاري",
                            NameEn = "Current Account"
                        },
                        new
                        {
                            Id = 8,
                            NameAr = "قرض سيارة",
                            NameEn = "Auto Loan"
                        },
                        new
                        {
                            Id = 9,
                            NameAr = "بطاقة مسبقة الدفع",
                            NameEn = "Prepaid Card"
                        },
                        new
                        {
                            Id = 10,
                            NameAr = "تأمين على الممتلكات",
                            NameEn = "Property Insurance"
                        },
                        new
                        {
                            Id = 11,
                            NameAr = "حساب استثماري",
                            NameEn = "Investment Account"
                        },
                        new
                        {
                            Id = 12,
                            NameAr = "قرض تجاري",
                            NameEn = "Business Loan"
                        },
                        new
                        {
                            Id = 13,
                            NameAr = "خدمات تحويل الأموال",
                            NameEn = "Money Transfer Services"
                        },
                        new
                        {
                            Id = 14,
                            NameAr = "قرض تعليمي",
                            NameEn = "Education Loan"
                        },
                        new
                        {
                            Id = 15,
                            NameAr = "خدمات إدارة الثروات",
                            NameEn = "Wealth Management Services"
                        },
                        new
                        {
                            Id = 16,
                            NameAr = "خدمات التقاعد",
                            NameEn = "Retirement Services"
                        });
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.MaritalStatus", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("MaritalStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            NameAr = "أعزب",
                            NameEn = "Single"
                        },
                        new
                        {
                            Id = (short)2,
                            NameAr = "متزوج ولا يعول",
                            NameEn = "Married without Dependents"
                        },
                        new
                        {
                            Id = (short)3,
                            NameAr = "متزوج ويعول",
                            NameEn = "Married with Dependents"
                        });
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.MisSellingCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("MisSellingCategory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameAr = "بيع منتجات غير مناسبة",
                            NameEn = "Sale of Unsuitable Products"
                        },
                        new
                        {
                            Id = 2,
                            NameAr = "إخفاء معلومات هامة",
                            NameEn = "Omission of Key Information"
                        },
                        new
                        {
                            Id = 3,
                            NameAr = "تقديم نصائح مضللة",
                            NameEn = "Providing Misleading Advice"
                        },
                        new
                        {
                            Id = 4,
                            NameAr = "ضغط مبيعات عالي",
                            NameEn = "High-Pressure Sales Tactics"
                        },
                        new
                        {
                            Id = 5,
                            NameAr = "عدم الإفصاح عن الرسوم",
                            NameEn = "Failure to Disclose Fees"
                        },
                        new
                        {
                            Id = 6,
                            NameAr = "تقديم وعود غير واقعية",
                            NameEn = "Making Unrealistic Promises"
                        },
                        new
                        {
                            Id = 7,
                            NameAr = "بيع منتجات غير مفهومة",
                            NameEn = "Sale of Complex Products without Explanation"
                        },
                        new
                        {
                            Id = 8,
                            NameAr = "تضليل حول المخاطر",
                            NameEn = "Misrepresentation of Risks"
                        },
                        new
                        {
                            Id = 9,
                            NameAr = "تضليل حول العوائد",
                            NameEn = "Misrepresentation of Returns"
                        },
                        new
                        {
                            Id = 10,
                            NameAr = "تضليل حول الشروط والأحكام",
                            NameEn = "Misrepresentation of Terms and Conditions"
                        },
                        new
                        {
                            Id = 11,
                            NameAr = "تضليل حول الأهلية",
                            NameEn = "Misrepresentation of Eligibility"
                        },
                        new
                        {
                            Id = 12,
                            NameAr = "بيع منتجات غير مرخصة",
                            NameEn = "Sale of Unlicensed Products"
                        },
                        new
                        {
                            Id = 13,
                            NameAr = "تضليل حول الفوائد",
                            NameEn = "Misrepresentation of Benefits"
                        },
                        new
                        {
                            Id = 14,
                            NameAr = "تضليل حول التكاليف",
                            NameEn = "Misrepresentation of Costs"
                        },
                        new
                        {
                            Id = 15,
                            NameAr = "تضليل حول الأداء السابق",
                            NameEn = "Misrepresentation of Past Performance"
                        },
                        new
                        {
                            Id = 16,
                            NameAr = "تضليل حول السيولة",
                            NameEn = "Misrepresentation of Liquidity"
                        },
                        new
                        {
                            Id = 17,
                            NameAr = "تضليل حول الضمانات",
                            NameEn = "Misrepresentation of Guarantees"
                        },
                        new
                        {
                            Id = 18,
                            NameAr = "تضليل حول التأمين",
                            NameEn = "Misrepresentation of Insurance Coverage"
                        },
                        new
                        {
                            Id = 19,
                            NameAr = "تضليل حول الاستثمارات",
                            NameEn = "Misrepresentation of Investment Strategies"
                        },
                        new
                        {
                            Id = 20,
                            NameAr = "تضليل حول الأصول",
                            NameEn = "Misrepresentation of Asset Allocation"
                        });
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.OfficialIdDocumentType", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("OfficialIdDocumentType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            NameAr = "بطاقة رقم قومي",
                            NameEn = "National Id Card"
                        },
                        new
                        {
                            Id = (short)2,
                            NameAr = "جواز سفر",
                            NameEn = "Passport"
                        },
                        new
                        {
                            Id = (short)3,
                            NameAr = "سجل تجاري",
                            NameEn = "Business Registeration Document"
                        },
                        new
                        {
                            Id = (short)4,
                            NameAr = "بطاقة ضريبية",
                            NameEn = "Tax Identification Document"
                        });
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AlternativePhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("date");

                    b.Property<short?>("EducationLevelId")
                        .HasColumnType("smallint");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<short>("EmploymentStatusId")
                        .HasColumnType("smallint");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("IdDocumentNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short>("MaritalStatusId")
                        .HasColumnType("smallint");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<short>("OfficialIdDocumentTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IdDocumentNumber", "OfficialIdDocumentTypeId" }, "UQ_Person")
                        .IsUnique();

                    b.HasIndex(new[] { "EducationLevelId" }, "idx_Person_EducationLevelId");

                    b.HasIndex(new[] { "EmploymentStatusId" }, "idx_Person_EmploymentStatusId");

                    b.HasIndex(new[] { "Gender" }, "idx_Person_Gender");

                    b.HasIndex(new[] { "IdDocumentNumber" }, "idx_Person_IdDocumentNumber");

                    b.HasIndex(new[] { "MaritalStatusId" }, "idx_Person_MaritalStatusId");

                    b.HasIndex(new[] { "OfficialIdDocumentTypeId" }, "idx_Person_OfficialIdDocumentTypeId");

                    b.ToTable("Person", (string)null);
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.RetailAnnualIncome", b =>
                {
                    b.Property<string>("CbeCustomerId")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("CbeCustomerId");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<short>("Year")
                        .HasColumnType("smallint");

                    b.Property<short>("CurrencyId")
                        .HasColumnType("smallint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CbeCustomerId", "BankId", "Year", "CurrencyId")
                        .HasName("PK_RetailAnnualIncome");

                    b.HasIndex(new[] { "BankId" }, "idx_RetailAnnualIncome_BankId");

                    b.HasIndex(new[] { "CbeCustomerId" }, "idx_RetailAnnualIncome_CbeCustomerId");

                    b.HasIndex(new[] { "CurrencyId" }, "idx_RetailAnnualIncome_CurrencyId");

                    b.ToTable("RetailAnnualIncome", (string)null);
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("DeptBurdenRatio")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("MaxLoanAllowedRiskRateInclusive")
                        .HasColumnType("smallint");

                    b.Property<short>("MinLoanAllowedRiskRateInclusive")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Setting", (string)null);
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.Sme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BusinessRegisterIdNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IndustrySector")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("LegalRepresentativePersonId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TaxIdNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BusinessRegisterIdNumber" }, "idx_Sme_BusinessRegisterIdNumber");

                    b.HasIndex(new[] { "LegalRepresentativePersonId" }, "idx_Sme_LegalRepresentativePersonId");

                    b.HasIndex(new[] { "TaxIdNumber" }, "idx_Sme_TaxIdNumber");

                    b.ToTable("Sme", (string)null);
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.SmeYearlyFinancialStatement", b =>
                {
                    b.Property<string>("CbeCustomerId")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("CbeCustomerId");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReportingDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Profit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<short>("ReportingCurrencyId")
                        .HasColumnType("smallint");

                    b.Property<decimal>("Revenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAssets")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalEquity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalLiabilities")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CbeCustomerId", "BankId", "ReportingDate")
                        .HasName("PK_SmeYearlyFinancialStatement");

                    b.HasIndex(new[] { "BankId" }, "idx_SmeYearlyFinancialStatement_BankId");

                    b.HasIndex(new[] { "CbeCustomerId" }, "idx_SmeYearlyFinancialStatement_CbeCustomerId");

                    b.HasIndex(new[] { "ReportingCurrencyId" }, "idx_SmeYearlyFinancialStatement_ReportingCurrencyId");

                    b.ToTable("SmeYearlyFinancialStatement", (string)null);
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.BankBranch", b =>
                {
                    b.HasOne("SupTechHackathon2024.EFCore.Models.Bank", "Bank")
                        .WithMany("BankBranches")
                        .HasForeignKey("BankId")
                        .IsRequired()
                        .HasConstraintName("FK_BankBranch_BankId");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.Call", b =>
                {
                    b.HasOne("SupTechHackathon2024.EFCore.Models.BankBranch", "Branch")
                        .WithMany("Calls")
                        .HasForeignKey("BankBranchId")
                        .IsRequired()
                        .HasConstraintName("FK_Call_BankBranchId");

                    b.HasOne("SupTechHackathon2024.EFCore.Models.Bank", "Bank")
                        .WithMany("Calls")
                        .HasForeignKey("BankId")
                        .IsRequired()
                        .HasConstraintName("FK_Call_BankId");

                    b.HasOne("SupTechHackathon2024.EFCore.Models.CbeCustomer", "CbeCustomer")
                        .WithMany("Calls")
                        .HasForeignKey("CbeCustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Call_CbeCustomerId");

                    b.HasOne("SupTechHackathon2024.EFCore.Models.FinancialService", "FinancialService")
                        .WithMany("Calls")
                        .HasForeignKey("FinancialServiceId")
                        .HasConstraintName("FK_Call_FinancialServiceId");

                    b.HasOne("SupTechHackathon2024.EFCore.Models.MisSellingCategory", "MisSellingCategory")
                        .WithMany("Calls")
                        .HasForeignKey("MisSellingCategoryId")
                        .HasConstraintName("FK_Call_MisSellingCategoryId");

                    b.Navigation("Bank");

                    b.Navigation("Branch");

                    b.Navigation("CbeCustomer");

                    b.Navigation("FinancialService");

                    b.Navigation("MisSellingCategory");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.CbeCustomer", b =>
                {
                    b.HasOne("SupTechHackathon2024.EFCore.Models.CustomerType", "CustomerType")
                        .WithMany("CbeCustomers")
                        .HasForeignKey("CustomerTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_CbeCustomer_CustomerTypeId");

                    b.HasOne("SupTechHackathon2024.EFCore.Models.Person", "Person")
                        .WithMany("CbeCustomers")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK_CbeCustomer_PersonId");

                    b.HasOne("SupTechHackathon2024.EFCore.Models.Sme", "Sme")
                        .WithMany("CbeCustomers")
                        .HasForeignKey("SmeId")
                        .HasConstraintName("FK_CbeCustomer_SmeId");

                    b.Navigation("CustomerType");

                    b.Navigation("Person");

                    b.Navigation("Sme");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.CustomerAddress", b =>
                {
                    b.HasOne("SupTechHackathon2024.EFCore.Models.CbeCustomer", "CbeCustomer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CbeCustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerAddress_CbeCustomerId");

                    b.HasOne("SupTechHackathon2024.EFCore.Models.AddressType", "Type")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerAddress_TypeId");

                    b.Navigation("CbeCustomer");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.CustomerCreditBureauReportingYearlyHistory", b =>
                {
                    b.HasOne("SupTechHackathon2024.EFCore.Models.CbeCustomer", "CbeCustomer")
                        .WithMany("CustomerCreditBureauReportingYearlyHistories")
                        .HasForeignKey("CbeCustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerCreditBureauReportingYearlyHistory_CbeCustomerId");

                    b.Navigation("CbeCustomer");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.CustomerRiskRateYearlyHistory", b =>
                {
                    b.HasOne("SupTechHackathon2024.EFCore.Models.Bank", "Bank")
                        .WithMany("CustomerRiskRateYearlyHistories")
                        .HasForeignKey("BankId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerRiskRateYearlyHistory_BankId");

                    b.HasOne("SupTechHackathon2024.EFCore.Models.CbeCustomer", "CbeCustomer")
                        .WithMany("CustomerRiskRateYearlyHistories")
                        .HasForeignKey("CbeCustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerRiskRateYearlyHistory_CbeCustomerId");

                    b.Navigation("Bank");

                    b.Navigation("CbeCustomer");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.Person", b =>
                {
                    b.HasOne("SupTechHackathon2024.EFCore.Models.EducationLevel", "EducationLevel")
                        .WithMany("People")
                        .HasForeignKey("EducationLevelId")
                        .HasConstraintName("FK_Person_EducationLevelId");

                    b.HasOne("SupTechHackathon2024.EFCore.Models.EmploymentStatus", "EmploymentStatus")
                        .WithMany("People")
                        .HasForeignKey("EmploymentStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Person_EmploymentStatusId");

                    b.HasOne("SupTechHackathon2024.EFCore.Models.MaritalStatus", "MaritalStatus")
                        .WithMany("People")
                        .HasForeignKey("MaritalStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Person_MaritalStatusId");

                    b.HasOne("SupTechHackathon2024.EFCore.Models.OfficialIdDocumentType", "OfficialIdDocumentType")
                        .WithMany("People")
                        .HasForeignKey("OfficialIdDocumentTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Person_OfficialIdDocumentTypeId");

                    b.Navigation("EducationLevel");

                    b.Navigation("EmploymentStatus");

                    b.Navigation("MaritalStatus");

                    b.Navigation("OfficialIdDocumentType");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.RetailAnnualIncome", b =>
                {
                    b.HasOne("SupTechHackathon2024.EFCore.Models.Bank", "Bank")
                        .WithMany("RetailAnnualIncomes")
                        .HasForeignKey("BankId")
                        .IsRequired()
                        .HasConstraintName("FK_RetailAnnualIncome_BankId");

                    b.HasOne("SupTechHackathon2024.EFCore.Models.CbeCustomer", "CbeCustomer")
                        .WithMany("RetailAnnualIncomes")
                        .HasForeignKey("CbeCustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_RetailAnnualIncome_CbeCustomerId");

                    b.HasOne("SupTechHackathon2024.EFCore.Models.Currency", "Currency")
                        .WithMany("RetailAnnualIncomes")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_RetailAnnualIncome_CurrencyId");

                    b.Navigation("Bank");

                    b.Navigation("CbeCustomer");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.Sme", b =>
                {
                    b.HasOne("SupTechHackathon2024.EFCore.Models.Person", "LegalRepresentativePerson")
                        .WithMany("Smes")
                        .HasForeignKey("LegalRepresentativePersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Sme_LegalRepresentativePersonId");

                    b.Navigation("LegalRepresentativePerson");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.SmeYearlyFinancialStatement", b =>
                {
                    b.HasOne("SupTechHackathon2024.EFCore.Models.Bank", "Bank")
                        .WithMany("SmeYearlyFinancialStatements")
                        .HasForeignKey("BankId")
                        .IsRequired()
                        .HasConstraintName("FK_SmeYearlyFinancialStatement_BankId");

                    b.HasOne("SupTechHackathon2024.EFCore.Models.CbeCustomer", "CbeCustomer")
                        .WithMany("SmeYearlyFinancialStatements")
                        .HasForeignKey("CbeCustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_SmeYearlyFinancialStatement_CbeCustomerId");

                    b.HasOne("SupTechHackathon2024.EFCore.Models.Currency", "ReportingCurrency")
                        .WithMany("SmeYearlyFinancialStatements")
                        .HasForeignKey("ReportingCurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_SmeYearlyFinancialStatement_ReportingCurrencyId");

                    b.Navigation("Bank");

                    b.Navigation("CbeCustomer");

                    b.Navigation("ReportingCurrency");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.AddressType", b =>
                {
                    b.Navigation("CustomerAddresses");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.Bank", b =>
                {
                    b.Navigation("BankBranches");

                    b.Navigation("Calls");

                    b.Navigation("CustomerRiskRateYearlyHistories");

                    b.Navigation("RetailAnnualIncomes");

                    b.Navigation("SmeYearlyFinancialStatements");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.BankBranch", b =>
                {
                    b.Navigation("Calls");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.CbeCustomer", b =>
                {
                    b.Navigation("Calls");

                    b.Navigation("CustomerAddresses");

                    b.Navigation("CustomerCreditBureauReportingYearlyHistories");

                    b.Navigation("CustomerRiskRateYearlyHistories");

                    b.Navigation("RetailAnnualIncomes");

                    b.Navigation("SmeYearlyFinancialStatements");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.Currency", b =>
                {
                    b.Navigation("RetailAnnualIncomes");

                    b.Navigation("SmeYearlyFinancialStatements");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.CustomerType", b =>
                {
                    b.Navigation("CbeCustomers");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.EducationLevel", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.EmploymentStatus", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.FinancialService", b =>
                {
                    b.Navigation("Calls");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.MaritalStatus", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.MisSellingCategory", b =>
                {
                    b.Navigation("Calls");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.OfficialIdDocumentType", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.Person", b =>
                {
                    b.Navigation("CbeCustomers");

                    b.Navigation("Smes");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.Sme", b =>
                {
                    b.Navigation("CbeCustomers");
                });
#pragma warning restore 612, 618
        }
    }
}
