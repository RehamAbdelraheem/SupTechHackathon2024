// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace SupTechHackathon2024.EFCore.Migrations
{
    [DbContext(typeof(CBEContext))]
    [Migration("20241209181649_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Arabic_100_CI_AI")
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.AddressType", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("AddressType", (string)null);
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Bank", (string)null);
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.BankBranch", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("BankBranch", (string)null);
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.Call", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AgentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AgentName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("CbecustomerId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("CBECustomerId");

                    b.Property<string>("CustomerSatisfaction")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FinancialProductId")
                        .HasColumnType("int");

                    b.Property<string>("GuidlinesForCustomer")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsAianalysisFailed")
                        .HasColumnType("bit")
                        .HasColumnName("IsAIAnalysisFailed");

                    b.Property<bool?>("IsMisSellingDetected")
                        .HasColumnType("bit");

                    b.Property<string>("MisSellingDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RecommendedActionForBankOrRegulator")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Transcript")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.HasKey("Id");

                    b.HasIndex("CbecustomerId");

                    b.HasIndex(new[] { "AgentId" }, "idx_Call_AgentId");

                    b.HasIndex(new[] { "BankId" }, "idx_Call_BankId");

                    b.HasIndex(new[] { "BranchId" }, "idx_Call_BranchId");

                    b.HasIndex(new[] { "FinancialProductId" }, "idx_Call_FinancialProductId");

                    b.HasIndex(new[] { "IsAianalysisFailed" }, "idx_Call_IsAIAnalysisFailed");

                    b.HasIndex(new[] { "IsMisSellingDetected" }, "idx_Call_IsMisSellingDetected");

                    b.ToTable("Call", (string)null);
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.Cbecustomer", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.Property<short>("CustomerTypeId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("LatestCreditBureauReportingDate")
                        .HasColumnType("date");

                    b.Property<short?>("LatestCreditBureauScore")
                        .HasColumnType("smallint");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("SmeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CustomerTypeId" }, "idx_CBECustomer_CustomerTypeId");

                    b.HasIndex(new[] { "LatestCreditBureauReportingDate" }, "idx_CBECustomer_LatestCreditBureauReportingDate");

                    b.HasIndex(new[] { "LatestCreditBureauScore" }, "idx_CBECustomer_LatestCreditBureauScore");

                    b.HasIndex(new[] { "PersonId" }, "idx_CBECustomer_PersonId");

                    b.HasIndex(new[] { "SmeId" }, "idx_CBECustomer_SmeId");

                    b.ToTable("CBECustomer", (string)null);
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.Currency", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Currency", (string)null);
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.CustomerAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CbecustomerId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("CBECustomerId");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Governorate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OtherDetails")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<short>("TypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CbecustomerId" }, "idx_CustomerAddress_CBECustomerId");

                    b.HasIndex(new[] { "TypeId" }, "idx_CustomerAddress_TypeId");

                    b.ToTable("CustomerAddress", (string)null);
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.CustomerCreditBureauReportingYearlyHistory", b =>
                {
                    b.Property<string>("CbecustomerId")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("CBECustomerId");

                    b.Property<short>("Year")
                        .HasColumnType("smallint");

                    b.Property<short>("Score")
                        .HasColumnType("smallint");

                    b.HasKey("CbecustomerId", "Year")
                        .HasName("PK__Customer__37B96D868FD0B3BB");

                    b.HasIndex(new[] { "CbecustomerId" }, "idx_CustomerCreditBureauReportingYearlyHistory_CBECustomerId");

                    b.HasIndex(new[] { "Score" }, "idx_CustomerCreditBureauReportingYearlyHistory_Score");

                    b.ToTable("CustomerCreditBureauReportingYearlyHistory", (string)null);
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.CustomerRiskRateYearlyHistory", b =>
                {
                    b.Property<string>("CbecustomerId")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("CBECustomerId");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<short>("Year")
                        .HasColumnType("smallint");

                    b.Property<short>("Rate")
                        .HasColumnType("smallint");

                    b.HasKey("CbecustomerId", "BankId", "Year")
                        .HasName("PK__Customer__04868A5233C20CF8");

                    b.HasIndex("BankId");

                    b.HasIndex(new[] { "CbecustomerId" }, "idx_CustomerRiskRateYearlyHistory_CBECustomerId");

                    b.ToTable("CustomerRiskRateYearlyHistory", (string)null);
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.CustomerType", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("CustomerType", (string)null);
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.EducationLevel", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("EducationLevel", (string)null);
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.EmploymentStatus", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("EmploymentStatus", (string)null);
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.FinancialService", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("FinancialService", (string)null);
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.MaritalStatus", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("MaritalStatus", (string)null);
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.OfficialIdDocumentType", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("OfficialIdDocumentType", (string)null);
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AlternativePhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("date");

                    b.Property<short?>("EducationLevelId")
                        .HasColumnType("smallint");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<short>("EmploymentStatusId")
                        .HasColumnType("smallint");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("IdDocumentNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short>("MaritalStatusId")
                        .HasColumnType("smallint");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<short>("OfficialIdDocumentTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IdDocumentNumber", "OfficialIdDocumentTypeId" }, "UQ__Person__6766F5EFE72AE447")
                        .IsUnique();

                    b.HasIndex(new[] { "EducationLevelId" }, "idx_Person_EducationLevelId");

                    b.HasIndex(new[] { "EmploymentStatusId" }, "idx_Person_EmploymentStatusId");

                    b.HasIndex(new[] { "Gender" }, "idx_Person_Gender");

                    b.HasIndex(new[] { "IdDocumentNumber" }, "idx_Person_IdDocumentNumber");

                    b.HasIndex(new[] { "MaritalStatusId" }, "idx_Person_MaritalStatusId");

                    b.HasIndex(new[] { "OfficialIdDocumentTypeId" }, "idx_Person_OfficialIdDocumentTypeId");

                    b.ToTable("Person", (string)null);
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.RetailAnnualIncome", b =>
                {
                    b.Property<string>("CbecustomerId")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("CBECustomerId");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<short>("Year")
                        .HasColumnType("smallint");

                    b.Property<short>("CurrencyId")
                        .HasColumnType("smallint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CbecustomerId", "BankId", "Year", "CurrencyId")
                        .HasName("PK__RetailAn__AB97CE22E0BF26F0");

                    b.HasIndex(new[] { "BankId" }, "idx_RetailAnnualIncome_BankId");

                    b.HasIndex(new[] { "CbecustomerId" }, "idx_RetailAnnualIncome_CBECustomerId");

                    b.HasIndex(new[] { "CurrencyId" }, "idx_RetailAnnualIncome_CurrencyId");

                    b.ToTable("RetailAnnualIncome", (string)null);
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("DeptBurdenRatio")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("MaxLoanAllowedRiskRateInclusive")
                        .HasColumnType("smallint");

                    b.Property<short>("MinLoanAllowedRiskRateInclusive")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Setting", (string)null);
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.Sme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BusinessRegisterIdNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IndustrySector")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("LegalRepresentativePersonId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TaxIdNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BusinessRegisterIdNumber" }, "idx_Sme_BusinessRegisterIdNumber");

                    b.HasIndex(new[] { "LegalRepresentativePersonId" }, "idx_Sme_LegalRepresentativePersonId");

                    b.HasIndex(new[] { "TaxIdNumber" }, "idx_Sme_TaxIdNumber");

                    b.ToTable("Sme", (string)null);
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.SmeYearlyFinancialStatement", b =>
                {
                    b.Property<string>("CbecustomerId")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("CBECustomerId");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReportingDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Profit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<short>("ReportingCurrencyId")
                        .HasColumnType("smallint");

                    b.Property<decimal>("Revenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAssets")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalEquity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalLiabilities")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CbecustomerId", "BankId", "ReportingDate")
                        .HasName("PK__SmeYearl__D2CC7D4AAF35AD8F");

                    b.HasIndex(new[] { "BankId" }, "idx_SmeYearlyFinancialStatement_BankId");

                    b.HasIndex(new[] { "CbecustomerId" }, "idx_SmeYearlyFinancialStatement_CBECustomerId");

                    b.HasIndex(new[] { "ReportingCurrencyId" }, "idx_SmeYearlyFinancialStatement_ReportingCurrencyId");

                    b.ToTable("SmeYearlyFinancialStatement", (string)null);
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.BankBranch", b =>
                {
                    b.HasOne("SupTechHackathon2024.EFCore.Models.Bank", "Bank")
                        .WithMany("BankBranches")
                        .HasForeignKey("BankId")
                        .IsRequired()
                        .HasConstraintName("FK__BankBranc__BankI__5812160E");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.Call", b =>
                {
                    b.HasOne("SupTechHackathon2024.EFCore.Models.Bank", "Bank")
                        .WithMany("Calls")
                        .HasForeignKey("BankId")
                        .IsRequired()
                        .HasConstraintName("FK__Call__BankId__5DCAEF64");

                    b.HasOne("SupTechHackathon2024.EFCore.Models.BankBranch", "Branch")
                        .WithMany("Calls")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK__Call__BranchId__5EBF139D");

                    b.HasOne("SupTechHackathon2024.EFCore.Models.Cbecustomer", "Cbecustomer")
                        .WithMany("Calls")
                        .HasForeignKey("CbecustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Call__CBECustome__5CD6CB2B");

                    b.HasOne("SupTechHackathon2024.EFCore.Models.FinancialService", "FinancialProduct")
                        .WithMany("Calls")
                        .HasForeignKey("FinancialProductId")
                        .HasConstraintName("FK__Call__FinancialP__5FB337D6");

                    b.Navigation("Bank");

                    b.Navigation("Branch");

                    b.Navigation("Cbecustomer");

                    b.Navigation("FinancialProduct");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.Cbecustomer", b =>
                {
                    b.HasOne("SupTechHackathon2024.EFCore.Models.CustomerType", "CustomerType")
                        .WithMany("Cbecustomers")
                        .HasForeignKey("CustomerTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__CBECustom__Custo__398D8EEE");

                    b.HasOne("SupTechHackathon2024.EFCore.Models.Person", "Person")
                        .WithMany("Cbecustomers")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK__CBECustom__Perso__3A81B327");

                    b.HasOne("SupTechHackathon2024.EFCore.Models.Sme", "Sme")
                        .WithMany("Cbecustomers")
                        .HasForeignKey("SmeId")
                        .HasConstraintName("FK__CBECustom__SmeId__3B75D760");

                    b.Navigation("CustomerType");

                    b.Navigation("Person");

                    b.Navigation("Sme");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.CustomerAddress", b =>
                {
                    b.HasOne("SupTechHackathon2024.EFCore.Models.Cbecustomer", "Cbecustomer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CbecustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__CustomerA__CBECu__5441852A");

                    b.HasOne("SupTechHackathon2024.EFCore.Models.AddressType", "Type")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK__CustomerA__TypeI__5535A963");

                    b.Navigation("Cbecustomer");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.CustomerCreditBureauReportingYearlyHistory", b =>
                {
                    b.HasOne("SupTechHackathon2024.EFCore.Models.Cbecustomer", "Cbecustomer")
                        .WithMany("CustomerCreditBureauReportingYearlyHistories")
                        .HasForeignKey("CbecustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__CustomerC__CBECu__440B1D61");

                    b.Navigation("Cbecustomer");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.CustomerRiskRateYearlyHistory", b =>
                {
                    b.HasOne("SupTechHackathon2024.EFCore.Models.Bank", "Bank")
                        .WithMany("CustomerRiskRateYearlyHistories")
                        .HasForeignKey("BankId")
                        .IsRequired()
                        .HasConstraintName("FK__CustomerR__BankI__412EB0B6");

                    b.HasOne("SupTechHackathon2024.EFCore.Models.Cbecustomer", "Cbecustomer")
                        .WithMany("CustomerRiskRateYearlyHistories")
                        .HasForeignKey("CbecustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__CustomerR__CBECu__403A8C7D");

                    b.Navigation("Bank");

                    b.Navigation("Cbecustomer");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.Person", b =>
                {
                    b.HasOne("SupTechHackathon2024.EFCore.Models.EducationLevel", "EducationLevel")
                        .WithMany("People")
                        .HasForeignKey("EducationLevelId")
                        .HasConstraintName("FK__Person__Educatio__300424B4");

                    b.HasOne("SupTechHackathon2024.EFCore.Models.EmploymentStatus", "EmploymentStatus")
                        .WithMany("People")
                        .HasForeignKey("EmploymentStatusId")
                        .IsRequired()
                        .HasConstraintName("FK__Person__Employme__2E1BDC42");

                    b.HasOne("SupTechHackathon2024.EFCore.Models.MaritalStatus", "MaritalStatus")
                        .WithMany("People")
                        .HasForeignKey("MaritalStatusId")
                        .IsRequired()
                        .HasConstraintName("FK__Person__MaritalS__2D27B809");

                    b.HasOne("SupTechHackathon2024.EFCore.Models.OfficialIdDocumentType", "OfficialIdDocumentType")
                        .WithMany("People")
                        .HasForeignKey("OfficialIdDocumentTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__Person__Official__2F10007B");

                    b.Navigation("EducationLevel");

                    b.Navigation("EmploymentStatus");

                    b.Navigation("MaritalStatus");

                    b.Navigation("OfficialIdDocumentType");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.RetailAnnualIncome", b =>
                {
                    b.HasOne("SupTechHackathon2024.EFCore.Models.Bank", "Bank")
                        .WithMany("RetailAnnualIncomes")
                        .HasForeignKey("BankId")
                        .IsRequired()
                        .HasConstraintName("FK__RetailAnn__BankI__4E88ABD4");

                    b.HasOne("SupTechHackathon2024.EFCore.Models.Cbecustomer", "Cbecustomer")
                        .WithMany("RetailAnnualIncomes")
                        .HasForeignKey("CbecustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__RetailAnn__CBECu__4D94879B");

                    b.HasOne("SupTechHackathon2024.EFCore.Models.Currency", "Currency")
                        .WithMany("RetailAnnualIncomes")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK__RetailAnn__Curre__4F7CD00D");

                    b.Navigation("Bank");

                    b.Navigation("Cbecustomer");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.Sme", b =>
                {
                    b.HasOne("SupTechHackathon2024.EFCore.Models.Person", "LegalRepresentativePerson")
                        .WithMany("Smes")
                        .HasForeignKey("LegalRepresentativePersonId")
                        .IsRequired()
                        .HasConstraintName("FK__Sme__LegalRepres__34C8D9D1");

                    b.Navigation("LegalRepresentativePerson");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.SmeYearlyFinancialStatement", b =>
                {
                    b.HasOne("SupTechHackathon2024.EFCore.Models.Bank", "Bank")
                        .WithMany("SmeYearlyFinancialStatements")
                        .HasForeignKey("BankId")
                        .IsRequired()
                        .HasConstraintName("FK__SmeYearly__BankI__49C3F6B7");

                    b.HasOne("SupTechHackathon2024.EFCore.Models.Cbecustomer", "Cbecustomer")
                        .WithMany("SmeYearlyFinancialStatements")
                        .HasForeignKey("CbecustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__SmeYearly__CBECu__48CFD27E");

                    b.HasOne("SupTechHackathon2024.EFCore.Models.Currency", "ReportingCurrency")
                        .WithMany("SmeYearlyFinancialStatements")
                        .HasForeignKey("ReportingCurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK__SmeYearly__Repor__4AB81AF0");

                    b.Navigation("Bank");

                    b.Navigation("Cbecustomer");

                    b.Navigation("ReportingCurrency");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.AddressType", b =>
                {
                    b.Navigation("CustomerAddresses");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.Bank", b =>
                {
                    b.Navigation("BankBranches");

                    b.Navigation("Calls");

                    b.Navigation("CustomerRiskRateYearlyHistories");

                    b.Navigation("RetailAnnualIncomes");

                    b.Navigation("SmeYearlyFinancialStatements");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.BankBranch", b =>
                {
                    b.Navigation("Calls");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.Cbecustomer", b =>
                {
                    b.Navigation("Calls");

                    b.Navigation("CustomerAddresses");

                    b.Navigation("CustomerCreditBureauReportingYearlyHistories");

                    b.Navigation("CustomerRiskRateYearlyHistories");

                    b.Navigation("RetailAnnualIncomes");

                    b.Navigation("SmeYearlyFinancialStatements");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.Currency", b =>
                {
                    b.Navigation("RetailAnnualIncomes");

                    b.Navigation("SmeYearlyFinancialStatements");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.CustomerType", b =>
                {
                    b.Navigation("Cbecustomers");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.EducationLevel", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.EmploymentStatus", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.FinancialService", b =>
                {
                    b.Navigation("Calls");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.MaritalStatus", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.OfficialIdDocumentType", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.Person", b =>
                {
                    b.Navigation("Cbecustomers");

                    b.Navigation("Smes");
                });

            modelBuilder.Entity("SupTechHackathon2024.EFCore.Models.Sme", b =>
                {
                    b.Navigation("Cbecustomers");
                });
#pragma warning restore 612, 618
        }
    }
}
